документация AssemPasc
расширение файлов .as

общие сведения:
mem - массив для хранения распарсенного файла .as
variables - массив для хранения значений, инициализируемых в программе, 
по умолчанию имеет ограничение в 7 мест с дефолтными значениями undefined

команды
input <номер ячейки> <значение> - записывает <значение> в ячейку с номером <номер ячейки>
output <номер ячейки> - выводит значение ячейки с номером <номер ячейки>
ass <номер ячейки 1> <номер ячейки 2> - присваивает значение <номер ячейки 2>
ячейке с номером <номер ячейки 1>
add <номер ячейки 1> <номер ячейки 2> - записывает в ячейку результат суммы ячееек 1 и 2
sub <номер ячейки 1> <номер ячейки 2> - записывает в ячейку результат разности ячееек 1 и 2
cmp <номер ячейки 1> <номер ячейки 2> - возвращает true, если значение ячейки 1 равно значению ячейки 2, false в противном случае
more <номер ячейки 1> <номер ячейки 2> - true если значение ячейки 1 больше значения ячейки 2, false в проивном случае
jmp @<begin/end> - jmp begin-возврат к началу основного тела программы, jmp end - своевременное завершение программы
je @<название флага> - переход к флагу с соответсвующим названием если предыдущая за ним команда (more/cmp) вернула true
(о том, что такое флаги см.ниже), в противном случае -  (естественный) переход к следующей команде

var - служебное слово, символизирующее начало инициализаци значений ячеек памяти 
по средством input; var является обязательным словом в программе, при этом 
сам его раздел может оставаться пустым; c раздела var начинается исполнение программы
начало и конец основного тела программы обособляются beginи end соответсвенно;
основное тело идет после раздела var

Флаги
флаги представляют собой некоторое подобие функций, 
синтаксис флагов
@<название флага>:
     <команда 1>
     ...
     <команда n>
     <ссылка на место в программу,куда вернуться (jmp/je ..)> 

ограничение на количество флагов нет; важно, чтобы разные флаги имели разные названия
раздел с флагами идет до раздела var
begin и end - можно также положить служебными флагами, их отличие от обычных 
лишь в том, что они вызываются посредством специальной команды (jmp) и исполняются 
в обязательном порядки (е требуют true от предшествующей команды)

//<комментарий> - подобные строки игнорируются и служат местом для служебных записей
рекомендуется слова в комментарии писать через _ в целях экономии памяти (mem)